
FPGA_Ram.elf:     file format elf32-tradlittlemips


Disassembly of section .text_init:

bfc00000 <__reset_vector>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:63
/**************************************************************************************
    R E S E T   E X C E P T I O N   H A N D L E R
**************************************************************************************/

LEAF(__reset_vector)
    la a2,__cpu_init
bfc00000:	3c06bfc0 	lui	a2,0xbfc0
bfc00004:	24c60014 	addiu	a2,a2,20
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:64
    jr a2
bfc00008:	00c00008 	jr	a2
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:65
    mtc0    $0, C0_COUNT        # Clear cp0 Count (Used to measure boot time.)
bfc0000c:	40804800 	mtc0	zero,c0_count
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:66
    nop
bfc00010:	00000000 	nop

bfc00014 <__cpu_init>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:75
LEAF(__cpu_init)

    # Verify the code is here due to a reset and not NMI. If this is an NMI then trigger
    # a debugger breakpoint using a sdbp instruction.

    mfc0    s1, C0_STATUS       # Read CP0 Status
bfc00014:	40116000 	mfc0	s1,c0_status
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:76
    ext     s1, s1, 19, 1       # extract NMI
bfc00018:	7e3104c0 	ext	s1,s1,0x13,0x1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:77
    beqz    s1, init_resources  # Branch if this is NOT an NMI exception.
bfc0001c:	12200002 	beqz	s1,bfc00028 <init_resources>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:78
    nop
bfc00020:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:79
    sdbbp                       # Failed assertion: NMI.
bfc00024:	7000003f 	sdbbp

bfc00028 <init_resources>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:85

init_resources:                 # initializes resources for "cpu".

    # Initialize CP0 registers

    la a2,      init_cp0        # Init CP0 Status, Count, Compare, Watch*, and Cause.
bfc00028:	3c06bfc0 	lui	a2,0xbfc0
bfc0002c:	24c60288 	addiu	a2,a2,648
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:86
    jalr a2
bfc00030:	00c0f809 	jalr	a2
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:87
    nop
bfc00034:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:118
  #  jalr    a2
  #  nop

    # Prepare for eret to main.

    la      ra, all_done        # If main returns then go to all_done:.
bfc00038:	3c1fbfc0 	lui	ra,0xbfc0
bfc0003c:	27ff0058 	addiu	ra,ra,88
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:119
    move    a0, zero            # Indicate that there are no arguments available.
bfc00040:	00002021 	move	a0,zero
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:120
    la      v0, _start          # load the address of the CRT entry point _start.
bfc00044:	3c02bfc0 	lui	v0,0xbfc0
bfc00048:	24420130 	addiu	v0,v0,304
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:121
    mtc0    v0, $30             # Write ErrorEPC with the address of main
bfc0004c:	4082f000 	mtc0	v0,c0_errorepc
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:122
    ehb                         # clear hazards (makes sure write to ErrorPC has completed)
bfc00050:	000000c0 	ehb
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:126

    # Return from exception will now execute code in main

    eret                        # Exit reset exception handler and start execution of _start.
bfc00054:	42000018 	eret

bfc00058 <all_done>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:132


/**************************************************************************************/
all_done:
    # If main returns it will return to this point.  Just spin here.
    b       all_done
bfc00058:	1000ffff 	b	bfc00058 <all_done>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:133
    nop
bfc0005c:	00000000 	nop

bfc00060 <init_icache>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:60
LEAF(init_icache)

	// Can be skipped if using magic simulation cache flush

	// Determine how big the I$ is
	mfc0	v0, C0_CONFIG1		// read C0_Config1
bfc00060:	40028001 	mfc0	v0,c0_config1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:63

	// Isolate I$ Line Size
	ext	    v1, v0, CFG1_ILSHIFT, 3		// extract IL
bfc00064:	7c4314c0 	ext	v1,v0,0x13,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:66

	// Skip ahead if No I$
	beq	    v1, zero, done_icache
bfc00068:	10600011 	beqz	v1,bfc000b0 <done_icache>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:67
	nop
bfc0006c:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:69

	li	    a2, 2
bfc00070:	24060002 	li	a2,2
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:70
	sllv    v1, a2, v1			// Now have true I$ line size in bytes
bfc00074:	00661804 	sllv	v1,a2,v1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:72

	ext	    a0, v0, CFG1_ISSHIFT, 3		// extract IS
bfc00078:	7c441580 	ext	a0,v0,0x16,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:73
	li	    a2, 64
bfc0007c:	24060040 	li	a2,64
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:74
	sllv    a0, a2, a0			// I$ Sets per way
bfc00080:	00862004 	sllv	a0,a2,a0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:77

	// Config1IA == I$ Assoc - 1
	ext	    a1, v0, CFG1_IASHIFT, 3		// extract IA
bfc00084:	7c451400 	ext	a1,v0,0x10,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:78
	add	    a1, 1
bfc00088:	20a50001 	addi	a1,a1,1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:80

	mul	    a0, a0, a1			// Total number of sets
bfc0008c:	70852002 	mul	a0,a0,a1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:82

	lui	    a2, 0x8000			// Get a KSeg0 address for cacheops
bfc00090:	3c068000 	lui	a2,0x8000
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:85

	// Clear TagLo/TagHi registers
	mtc0    zero, C0_TAGLO		// write C0_ITagLo
bfc00094:	4080e000 	mtc0	zero,c0_taglo
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:86
	mtc0    zero, C0_TAGHI		// write C0_ITagHi
bfc00098:	4080e800 	mtc0	zero,c0_taghi
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:88

	move    a3, a0
bfc0009c:	00803821 	move	a3,a0

bfc000a0 <next_icache_tag>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:93

next_icache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
	cache   0x8, 0(a2)			// ICIndexStTag
bfc000a0:	bcc80000 	cache	0x8,0(a2)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:94
	add	    a3, -1				// Decrement set counter
bfc000a4:	20e7ffff 	addi	a3,a3,-1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:95
	bne     a3, zero, next_icache_tag
bfc000a8:	14e0fffd 	bnez	a3,bfc000a0 <next_icache_tag>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:96
	add     a2, v1				// Get next line address
bfc000ac:	00c33020 	add	a2,a2,v1

bfc000b0 <done_icache>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:100

done_icache:

    jr      ra
bfc000b0:	03e00008 	jr	ra
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:101
    nop
bfc000b4:	00000000 	nop

bfc000b8 <init_dcache>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:110
* init_dcache invalidates all data cache entries
**************************************************************************************/

LEAF(init_dcache)

	mfc0	v0, C0_CONFIG1		// read C0_Config1
bfc000b8:	40028001 	mfc0	v0,c0_config1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:113

	// Isolate D$ Line Size
	ext	    v1, v0, CFG1_DLSHIFT, 3		// extract DL
bfc000bc:	7c431280 	ext	v1,v0,0xa,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:116

	// Skip ahead if No D$
	beq	    v1, zero, done_dcache
bfc000c0:	10600013 	beqz	v1,bfc00110 <done_dcache>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:117
	nop
bfc000c4:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:119

	li	    a2, 2
bfc000c8:	24060002 	li	a2,2
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:120
	sllv	v1, a2, v1			// Now have true D$ line size in bytes
bfc000cc:	00661804 	sllv	v1,a2,v1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:122

	ext	    a0, v0, CFG1_DSSHIFT, 3		// extract DS
bfc000d0:	7c441340 	ext	a0,v0,0xd,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:123
	li	    a2, 64
bfc000d4:	24060040 	li	a2,64
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:124
	sllv	a0, a2, a0	// D$ Sets per way
bfc000d8:	00862004 	sllv	a0,a2,a0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:127

	// Config1DA == D$ Assoc - 1
	ext	    a1, v0, CFG1_DASHIFT, 3		// extract DA
bfc000dc:	7c4511c0 	ext	a1,v0,0x7,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:128
	add	    a1, 1
bfc000e0:	20a50001 	addi	a1,a1,1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:130

	mul	    a0, a0, a1			// Get total number of sets
bfc000e4:	70852002 	mul	a0,a0,a1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:132

	lui	    a2, 0x8000		    // Get a KSeg0 address for cacheops
bfc000e8:	3c068000 	lui	a2,0x8000
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:135

	// Clear TagLo/TagHi registers
	mtc0	zero, C0_TAGLO		// write C0_TagLo
bfc000ec:	4080e000 	mtc0	zero,c0_taglo
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:136
	mtc0	zero, C0_TAGHI		// write C0_TagHi
bfc000f0:	4080e800 	mtc0	zero,c0_taghi
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:137
	mtc0	zero, C0_TAGLO, 2	// write C0_DTagLo
bfc000f4:	4080e002 	mtc0	zero,c0_taglo1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:138
	mtc0	zero, C0_TAGHI, 2	// write C0_DTagHi
bfc000f8:	4080e802 	mtc0	zero,c0_taghi1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:140

	move	a3, a0
bfc000fc:	00803821 	move	a3,a0

bfc00100 <next_dcache_tag>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:146

next_dcache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit

    cache	0x9, 0(a2)			// DCIndexStTag
bfc00100:	bcc90000 	cache	0x9,0(a2)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:147
	add	    a3, -1			    // Decrement set counter
bfc00104:	20e7ffff 	addi	a3,a3,-1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:149

	bne	    a3, zero, next_dcache_tag
bfc00108:	14e0fffd 	bnez	a3,bfc00100 <next_dcache_tag>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:150
	add	    a2, v1		    	// Get next line address
bfc0010c:	00c33020 	add	a2,a2,v1

bfc00110 <done_dcache>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:153

done_dcache:
    jr      ra
bfc00110:	03e00008 	jr	ra
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:154
    nop
bfc00114:	00000000 	nop

bfc00118 <change_k0_cca>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:160
END(init_dcache)

LEAF(change_k0_cca)
	// NOTE! This code must be executed in KSEG1 (not KSGE0 uncached)
    // Set CCA for kseg0 to cacheable
	mfc0	v0, C0_CONFIG	// read C0_Config
bfc00118:	40028000 	mfc0	v0,c0_config
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:161
	li	v1, 3			// CCA for single-core processors
bfc0011c:	24030003 	li	v1,3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:162
      ins	v0, v1, 0, 3	// insert K0
bfc00120:	7c621004 	ins	v0,v1,0x0,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:163
	mtc0	v0, C0_CONFIG	// write C0_Config
bfc00124:	40828000 	mtc0	v0,c0_config
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:164
	jr.hb   ra
bfc00128:	03e00408 	jr.hb	ra
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_caches.S:165
    	nop
bfc0012c:	00000000 	nop

bfc00130 <_start>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:59
/**************************************************************************************
**************************************************************************************/
LEAF(_start)

    # Set the global pointer register address to _gp - value set in linker .ld file
    la      gp, _gp             # All share globals.
bfc00130:	3c1cbfc1 	lui	gp,0xbfc1
bfc00134:	279c9110 	addiu	gp,gp,-28400
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:62

    # Set up the stack pointer register to STACK_BASE_ADDR defined in boot.h
    li      sp, STACK_BASE_ADDR # Set up stack base.
bfc00138:	3c1dbfc0 	lui	sp,0xbfc0
bfc0013c:	37bd0900 	ori	sp,sp,0x900
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:65

    # Make a stack frame; must be a multiple of 8-bytes
    addiu   sp, sp, -8
bfc00140:	27bdfff8 	addiu	sp,sp,-8
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:68

    # Preserve return address over the call to main
    sw      ra, 0(sp)
bfc00144:	afbf0000 	sw	ra,0(sp)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:70

    li      s1_all_ones, 0xffffffff
bfc00148:	2411ffff 	li	s1,-1

bfc0014c <zero_bss>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:73

zero_bss:
    la      t1_temp_addr, _fbss
bfc0014c:	3c09bfc0 	lui	t1,0xbfc0
bfc00150:	25291110 	addiu	t1,t1,4368
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:74
    ins     t1_temp_addr, s1_all_ones, 29, 1
bfc00154:	7e29ef44 	ins	t1,s1,0x1d,0x1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:75
    la      t3_temp_mark, _end
bfc00158:	3c0bbfc0 	lui	t3,0xbfc0
bfc0015c:	256b1110 	addiu	t3,t3,4368
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:76
    ins     t3_temp_mark, s1_all_ones, 29, 1
bfc00160:	7e2bef44 	ins	t3,s1,0x1d,0x1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:77
    beq     t1_temp_addr, t3_temp_mark, invoke_main
bfc00164:	112b0005 	beq	t1,t3,bfc0017c <invoke_main>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:78
    nop
bfc00168:	00000000 	nop

bfc0016c <next_bss_word>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:80
next_bss_word:
    sw      zero, 0(t1_temp_addr)
bfc0016c:	ad200000 	sw	zero,0(t1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:81
    addiu   t1_temp_addr, 4
bfc00170:	25290004 	addiu	t1,t1,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:82
    bne     t1_temp_addr, t3_temp_mark, next_bss_word
bfc00174:	152bfffd 	bne	t1,t3,bfc0016c <next_bss_word>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:83
    nop
bfc00178:	00000000 	nop

bfc0017c <invoke_main>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:86

invoke_main:
    la      t0, main
bfc0017c:	3c08bfc0 	lui	t0,0xbfc0
bfc00180:	25081044 	addiu	t0,t0,4164
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:88
    # Create space for the o32 argument stack
    addiu   sp, sp, -16
bfc00184:	27bdfff0 	addiu	sp,sp,-16
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:90
    # Call main
    jalr    t0
bfc00188:	0100f809 	jalr	t0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:91
    nop
bfc0018c:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:93

    lw      ra, 0(sp)
bfc00190:	8fbf0000 	lw	ra,0(sp)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:94
    addiu   sp, sp, 8
bfc00194:	27bd0008 	addiu	sp,sp,8
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:95
    jr      ra
bfc00198:	03e00008 	jr	ra
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/mini_crt0.S:96
    nop
bfc0019c:	00000000 	nop
	...
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:149
**************************************************************************************/
/* NOTE: the linker script must insure that this code starts at start + 0x200 so the exception */
/* vectors will be addressed properly. All .org assume this! */
/* TLB refill, 32 bit task. */
.org 0x200                      # TLB refill, 32 bit task.
    sdbbp                       # This has the effect of starting the debugger
bfc00200:	7000003f 	sdbbp
	...
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:153
    nop

.org 0x280                      # XTLB refill, 64 bit task. start + 0x280
    sdbbp                       # This has the effect of starting the debugger
bfc00280:	7000003f 	sdbbp
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:154
    nop
bfc00284:	00000000 	nop

bfc00288 <init_cp0>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:56
/**************************************************************************************
**************************************************************************************/
LEAF(init_cp0)

    // Initialize Status
	li	v1, 0x00400404		// (M_StatusERL | M_StatusIPL1 | M_StatusBEV)
bfc00288:	3c030040 	lui	v1,0x40
bfc0028c:	34630404 	ori	v1,v1,0x404
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:57
	mtc0	v1, C0_STATUS		// write C0_Status
bfc00290:	40836000 	mtc0	v1,c0_status
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:60

	// Initialize Watch registers if implemented.
	mfc0	v0, C0_CONFIG1		// read C0_Config1
bfc00294:	40028001 	mfc0	v0,c0_config1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:61
	ext	v1, v0, 3, 1		// extract bit 3 WR (Watch registers implemented)
bfc00298:	7c4300c0 	ext	v1,v0,0x3,0x1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:62
	beq 	v1, zero, done_wr
bfc0029c:	10600011 	beqz	v1,bfc002e4 <done_wr>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:63
	li    	v1, 0x7				// (M_WatchHiI | M_WatchHiR | M_WatchHiW)
bfc002a0:	24030007 	li	v1,7
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:66

	// Clear all possible Watch Status bits and disable watch exceptions
	mtc0	v1, C0_WATCHHI		// write C0_WatchHi0
bfc002a4:	40839800 	mtc0	v1,c0_watchhi
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:67
	mtc0	zero, C0_WATCHLO	// write C0_WatchLo0
bfc002a8:	40809000 	mtc0	zero,c0_watchlo
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:69

	mtc0	v1, C0_WATCHHI, 1	// write C0_WatchHi1
bfc002ac:	40839801 	mtc0	v1,c0_watchhi,1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:70
	mtc0	zero, C0_WATCHLO, 1	// write C0_WatchLo1
bfc002b0:	40809001 	mtc0	zero,c0_watchlo,1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:72

	mtc0	v1, C0_WATCHHI, 2	// write C0_WatchHi2
bfc002b4:	40839802 	mtc0	v1,c0_watchhi,2
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:73
	mtc0	zero, C0_WATCHLO, 2	// write C0_WatchLo2
bfc002b8:	40809002 	mtc0	zero,c0_watchlo,2
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:75

	mtc0	v1, C0_WATCHHI, 3	// write C0_WatchHi3
bfc002bc:	40839803 	mtc0	v1,c0_watchhi,3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:76
	mtc0	zero, C0_WATCHLO, 3	// write C0_WatchLo3
bfc002c0:	40809003 	mtc0	zero,c0_watchlo,3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:78

	mtc0	v1, C0_WATCHHI, 4	// write C0_WatchHi4
bfc002c4:	40839804 	mtc0	v1,c0_watchhi,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:79
	mtc0	zero, C0_WATCHLO, 4	// write C0_WatchLo4
bfc002c8:	40809004 	mtc0	zero,c0_watchlo,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:81

	mtc0	v1, C0_WATCHHI, 5	// write C0_WatchHi5
bfc002cc:	40839805 	mtc0	v1,c0_watchhi,5
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:82
	mtc0	zero, C0_WATCHLO, 5	// write C0_WatchLo5
bfc002d0:	40809005 	mtc0	zero,c0_watchlo,5
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:84

	mtc0	v1, C0_WATCHHI, 6	// write C0_WatchHi6
bfc002d4:	40839806 	mtc0	v1,c0_watchhi,6
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:85
	mtc0	zero, C0_WATCHLO, 6	// write C0_WatchLo6
bfc002d8:	40809006 	mtc0	zero,c0_watchlo,6
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:87

	mtc0	v1, C0_WATCHHI, 7	// write C0_WatchHi7
bfc002dc:	40839807 	mtc0	v1,c0_watchhi,7
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:88
	mtc0	zero, C0_WATCHLO, 7	// write C0_WatchLo7
bfc002e0:	40809007 	mtc0	zero,c0_watchlo,7

bfc002e4 <done_wr>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:93

done_wr:

	// Clear WP bit to avoid watch exception upon user code entry, IV, and software interrupts.
	mtc0	zero, C0_CAUSE		// write C0_Cause: Init AFTER init of CP0 WatchHi/Lo registers.
bfc002e4:	40806800 	mtc0	zero,c0_cause
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:96

	// Clear timer interrupt. (Count was cleared at the reset vector to allow timing boot.)
	mtc0	zero, C0_COMPARE	// write C0_Compare
bfc002e8:	40805800 	mtc0	zero,c0_compare
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:98

        jr      ra
bfc002ec:	03e00008 	jr	ra
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_cp0.S:99
	nop
bfc002f0:	00000000 	nop
	...
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:159

#include "init_cp0.S"

.org 0x300                      # Cache error exception. start + 0x300
    sdbbp                       # This has the effect of starting the debugger
bfc00300:	7000003f 	sdbbp
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:160
    nop
bfc00304:	00000000 	nop

bfc00308 <init_tlb>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:57
**************************************************************************************/
LEAF(init_tlb)

check_for_tlb:
	// Determine if we have a TLB
	mfc0    v1, C0_CONFIG			// read C0_Config
bfc00308:	40038000 	mfc0	v1,c0_config
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:58
	ext	    v1, v1, 7, 3			// extract MT field
bfc0030c:	7c6311c0 	ext	v1,v1,0x7,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:59
	li	    a3, 0x1					// load a 1 to check against
bfc00310:	24070001 	li	a3,1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:60
	bne	    v1, a3, done_init_tlb
bfc00314:	1467000f 	bne	v1,a3,bfc00354 <done_init_tlb>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:61
	mfc0    v0, C0_CONFIG1			// C0_Config1
bfc00318:	40028001 	mfc0	v0,c0_config1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:62
	nop
bfc0031c:	00000000 	nop

bfc00320 <start_init_tlb>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:66

start_init_tlb:
	// Config1MMUSize == Number of TLB entries - 1
	ext     v1, v0, CFG1_MMUSSHIFT, 6 // extract MMU Size
bfc00320:	7c432e40 	ext	v1,v0,0x19,0x6
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:67
	mtc0    zero, C0_ENTRYLO0		// write C0_EntryLo0
bfc00324:	40801000 	mtc0	zero,c0_entrylo0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:68
	mtc0    zero, C0_ENTRYLO1		// write C0_EntryLo1
bfc00328:	40801800 	mtc0	zero,c0_entrylo1
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:69
	mtc0    zero, C0_PAGEMASK		// write C0_PageMask
bfc0032c:	40802800 	mtc0	zero,c0_pagemask
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:70
	mtc0    zero, C0_WIRED			// write C0_Wired
bfc00330:	40803000 	mtc0	zero,c0_wired
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:71
	li	    a0, 0x80000000
bfc00334:	3c048000 	lui	a0,0x8000

bfc00338 <next_tlb_entry_pair>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:74

next_tlb_entry_pair:
	mtc0    v1, C0_INDEX			// write C0_Index
bfc00338:	40830000 	mtc0	v1,c0_index
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:75
	mtc0	a0, C0_ENTRYHI			// write C0_EntryHi
bfc0033c:	40845000 	mtc0	a0,c0_entryhi
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:76
	ehb
bfc00340:	000000c0 	ehb
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:77
	tlbwi
bfc00344:	42000002 	tlbwi
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:78
	add	    a0, (2<<13)				// Add 8K to the address to avoid TLB conflict with previous entry
bfc00348:	20844000 	addi	a0,a0,16384
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:80

	bne		v1, zero, next_tlb_entry_pair
bfc0034c:	1460fffa 	bnez	v1,bfc00338 <next_tlb_entry_pair>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:81
	add	    v1, -1
bfc00350:	2063ffff 	addi	v1,v1,-1

bfc00354 <done_init_tlb>:
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:84

done_init_tlb:
    jr      ra
bfc00354:	03e00008 	jr	ra
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/init_tlb.S:85
    nop
bfc00358:	00000000 	nop
	...
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:167
#include "init_tlb.S"


.org 0x380    /* General exception. */
    # display alternating one-zeros on board LEDs
    li      k0, BOARD_16_LEDS_ADDR  # Board LEDs display
bfc00380:	3c1ab060 	lui	k0,0xb060
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:168
    li      k1, 0x5555          # alternating one-zeros
bfc00384:	241b5555 	li	k1,21845
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:169
    sw      k1, 0(k0)           # Write pattern to LEDs
bfc00388:	af5b0000 	sw	k1,0(k0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:170
    eret
bfc0038c:	42000018 	eret
	...
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:177

# If you want the above code to fit into 1k flash you will need to leave out the
# code below. This is the code that covers the debug exception which you normally will not get.

.org 0x480 /* EJTAG debug exception (EJTAG Control Register[ProbTrap] == 0.) */
    li      r24_malta_word, BOARD_16_LEDS_ADDR     # If post boot then $24 is clobbered.
bfc00480:	3c18b060 	lui	t8,0xb060
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:178
    mtc0    a0, C0_DESAVE       # DeSave a0
bfc00484:	4084f800 	mtc0	a0,c0_desave
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:179
    mfc0    a0, C0_DEPC         # Read DEPC
bfc00488:	4004c000 	mfc0	a0,c0_depc
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:180
    sw      a0, 0(r24_malta_word)    # Display lower 16 bits of DEPC if there is not an EJTAG probe.
bfc0048c:	af040000 	sw	a0,0(t8)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:181
    mfc0    a0, C0_DESAVE       # Restore a0
bfc00490:	4004f800 	mfc0	a0,c0_desave
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:182
1:  b       1b  /* Stay here */
bfc00494:	1000ffff 	b	bfc00494 <done_init_tlb+0x140>
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/boot.S:183
    nop
bfc00498:	00000000 	nop
done_init_tlb():
bfc0049c:	00000000 	nop

Disassembly of section .text_ram:

bfc01000 <delay>:
delay():
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:72

  while(1) { }
  return 0;
}

void delay() {
bfc01000:	27bdfff8 	addiu	sp,sp,-8
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:75
  volatile unsigned int j;

  for (j = 0; j < (1000000); j++) ;	// delay 
bfc01004:	afa00000 	sw	zero,0(sp)
bfc01008:	8fa20000 	lw	v0,0(sp)
bfc0100c:	3c03000f 	lui	v1,0xf
bfc01010:	24634240 	addiu	v1,v1,16960
bfc01014:	0043102b 	sltu	v0,v0,v1
bfc01018:	10400008 	beqz	v0,bfc0103c <delay+0x3c>
bfc0101c:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:75 (discriminator 3)
bfc01020:	8fa20000 	lw	v0,0(sp)
bfc01024:	24420001 	addiu	v0,v0,1
bfc01028:	afa20000 	sw	v0,0(sp)
bfc0102c:	8fa20000 	lw	v0,0(sp)
bfc01030:	0043102b 	sltu	v0,v0,v1
bfc01034:	1440fffa 	bnez	v0,bfc01020 <delay+0x20>
bfc01038:	00000000 	nop
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:76
}
bfc0103c:	03e00008 	jr	ra
bfc01040:	27bd0008 	addiu	sp,sp,8

bfc01044 <main>:
main():
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:31
  *MF_DISP_CTL0 = 0x00000000;

  //Load DISPLAY PALETTE
  *pal_ptr = 0x00000000; //Pal[0] = BLACK
  pal_ptr += 1;
  *pal_ptr = 0x0003F000; //Pal[1] = RED
bfc01044:	3c040003 	lui	a0,0x3
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:26
  int *pal_ptr = (int*)MF_DISP_PAL_BASE;
  int *frm_ptr = (int*)MF_DISP_FRM_BASE;
  int i = 0;
  
  //Enable DISPLAY CTL0[0] = Enable
  *MF_DISP_CTL0 = 0x00000000;
bfc01048:	3c03b0d0 	lui	v1,0xb0d0
bfc0104c:	3463fe00 	ori	v1,v1,0xfe00
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:31

  //Load DISPLAY PALETTE
  *pal_ptr = 0x00000000; //Pal[0] = BLACK
  pal_ptr += 1;
  *pal_ptr = 0x0003F000; //Pal[1] = RED
bfc01050:	3484f000 	ori	a0,a0,0xf000
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:37
  pal_ptr += 1;
  *pal_ptr = 0x00000FC0; //Pal[2] = GREEN
  pal_ptr += 1;
  *pal_ptr = 0x0000003F; //Pal[3] = BLUE
  pal_ptr += 1;
  *pal_ptr = 0x0003FFFF; //Pal[4] = WHITE
bfc01054:	24850fff 	addiu	a1,a0,4095
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:31
  *MF_DISP_CTL0 = 0x00000000;

  //Load DISPLAY PALETTE
  *pal_ptr = 0x00000000; //Pal[0] = BLACK
  pal_ptr += 1;
  *pal_ptr = 0x0003F000; //Pal[1] = RED
bfc01058:	ac64fc04 	sw	a0,-1020(v1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:33
  pal_ptr += 1;
  *pal_ptr = 0x00000FC0; //Pal[2] = GREEN
bfc0105c:	24040fc0 	li	a0,4032
bfc01060:	ac64fc08 	sw	a0,-1016(v1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:35
  pal_ptr += 1;
  *pal_ptr = 0x0000003F; //Pal[3] = BLUE
bfc01064:	2404003f 	li	a0,63
bfc01068:	ac64fc0c 	sw	a0,-1012(v1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:22
  volatile int *MF_DISP_CTL1 = (int*)0xb0d0fe04;
  volatile int *MF_DISP_PAL_BASE = (int*)0xb0d0fa00;
  volatile int *MF_DISP_FRM_BASE = (int*)0xb0d00000;
  
  int *pal_ptr = (int*)MF_DISP_PAL_BASE;
  int *frm_ptr = (int*)MF_DISP_FRM_BASE;
bfc0106c:	3c02b0d0 	lui	v0,0xb0d0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:26
  int i = 0;
  
  //Enable DISPLAY CTL0[0] = Enable
  *MF_DISP_CTL0 = 0x00000000;
bfc01070:	ac600000 	sw	zero,0(v1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:29

  //Load DISPLAY PALETTE
  *pal_ptr = 0x00000000; //Pal[0] = BLACK
bfc01074:	ac60fc00 	sw	zero,-1024(v1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:37
  pal_ptr += 1;
  *pal_ptr = 0x00000FC0; //Pal[2] = GREEN
  pal_ptr += 1;
  *pal_ptr = 0x0000003F; //Pal[3] = BLUE
  pal_ptr += 1;
  *pal_ptr = 0x0003FFFF; //Pal[4] = WHITE
bfc01078:	ac65fc10 	sw	a1,-1008(v1)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:42
  pal_ptr += 1;

  //Alternating Red Dots
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x01000100;
bfc0107c:	3c030100 	lui	v1,0x100
bfc01080:	24630100 	addiu	v1,v1,256
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:41
  pal_ptr += 1;
  *pal_ptr = 0x0003FFFF; //Pal[4] = WHITE
  pal_ptr += 1;

  //Alternating Red Dots
  for( i=0; i<4000; i=i+1) {
bfc01084:	24443e80 	addiu	a0,v0,16000
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:42 (discriminator 3)
     *frm_ptr = 0x01000100;
bfc01088:	ac430000 	sw	v1,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:43 (discriminator 3)
     frm_ptr += 1;
bfc0108c:	24420004 	addiu	v0,v0,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:41 (discriminator 3)
  pal_ptr += 1;
  *pal_ptr = 0x0003FFFF; //Pal[4] = WHITE
  pal_ptr += 1;

  //Alternating Red Dots
  for( i=0; i<4000; i=i+1) {
bfc01090:	5444fffe 	bnel	v0,a0,bfc0108c <main+0x48>
bfc01094:	ac430000 	sw	v1,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:47 (discriminator 3)
     *frm_ptr = 0x01000100;
     frm_ptr += 1;
  }
  //Alternating Green Dots
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x02000200;
bfc01098:	3c040200 	lui	a0,0x200
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:46 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x01000100;
     frm_ptr += 1;
  }
  //Alternating Green Dots
  for( i=0; i<4000; i=i+1) {
bfc0109c:	3c03b0d0 	lui	v1,0xb0d0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:47 (discriminator 3)
     *frm_ptr = 0x02000200;
bfc010a0:	24840200 	addiu	a0,a0,512
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:46 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x01000100;
     frm_ptr += 1;
  }
  //Alternating Green Dots
  for( i=0; i<4000; i=i+1) {
bfc010a4:	24637d00 	addiu	v1,v1,32000
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:47 (discriminator 3)
     *frm_ptr = 0x02000200;
bfc010a8:	ac440000 	sw	a0,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:48 (discriminator 3)
     frm_ptr += 1;
bfc010ac:	24420004 	addiu	v0,v0,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:46 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x01000100;
     frm_ptr += 1;
  }
  //Alternating Green Dots
  for( i=0; i<4000; i=i+1) {
bfc010b0:	5443fffe 	bnel	v0,v1,bfc010ac <main+0x68>
bfc010b4:	ac440000 	sw	a0,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:52 (discriminator 3)
     *frm_ptr = 0x02000200;
     frm_ptr += 1;
  }
  //Alternating Blue Dots
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x03000300;
bfc010b8:	3c040300 	lui	a0,0x300
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:51 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x02000200;
     frm_ptr += 1;
  }
  //Alternating Blue Dots
  for( i=0; i<4000; i=i+1) {
bfc010bc:	3c03b0d0 	lui	v1,0xb0d0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:52 (discriminator 3)
     *frm_ptr = 0x03000300;
bfc010c0:	24840300 	addiu	a0,a0,768
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:51 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x02000200;
     frm_ptr += 1;
  }
  //Alternating Blue Dots
  for( i=0; i<4000; i=i+1) {
bfc010c4:	3463bb80 	ori	v1,v1,0xbb80
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:52 (discriminator 3)
     *frm_ptr = 0x03000300;
bfc010c8:	ac440000 	sw	a0,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:53 (discriminator 3)
     frm_ptr += 1;
bfc010cc:	24420004 	addiu	v0,v0,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:51 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x02000200;
     frm_ptr += 1;
  }
  //Alternating Blue Dots
  for( i=0; i<4000; i=i+1) {
bfc010d0:	5443fffe 	bnel	v0,v1,bfc010cc <main+0x88>
bfc010d4:	ac440000 	sw	a0,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:57 (discriminator 3)
     *frm_ptr = 0x03000300;
     frm_ptr += 1;
  }
  //Alternating White Dots
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x04000400;
bfc010d8:	3c040400 	lui	a0,0x400
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:56 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x03000300;
     frm_ptr += 1;
  }
  //Alternating White Dots
  for( i=0; i<4000; i=i+1) {
bfc010dc:	3c03b0d0 	lui	v1,0xb0d0
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:57 (discriminator 3)
     *frm_ptr = 0x04000400;
bfc010e0:	24840400 	addiu	a0,a0,1024
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:56 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x03000300;
     frm_ptr += 1;
  }
  //Alternating White Dots
  for( i=0; i<4000; i=i+1) {
bfc010e4:	3463fa00 	ori	v1,v1,0xfa00
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:57 (discriminator 3)
     *frm_ptr = 0x04000400;
bfc010e8:	ac440000 	sw	a0,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:58 (discriminator 3)
     frm_ptr += 1;
bfc010ec:	24420004 	addiu	v0,v0,4
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:56 (discriminator 3)
  for( i=0; i<4000; i=i+1) {
     *frm_ptr = 0x03000300;
     frm_ptr += 1;
  }
  //Alternating White Dots
  for( i=0; i<4000; i=i+1) {
bfc010f0:	5443fffe 	bnel	v0,v1,bfc010ec <main+0xa8>
bfc010f4:	ac440000 	sw	a0,0(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:62
     *frm_ptr = 0x04000400;
     frm_ptr += 1;
  }
  
  //Switch DISPLAY Frame CTL1[0] = Switch
  *MF_DISP_CTL1 = 0x00000001;
bfc010f8:	24030001 	li	v1,1
bfc010fc:	ac430404 	sw	v1,1028(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:64
  //Enable DISPLAY CTL0[0] = Enable
  *MF_DISP_CTL0 = 0x00000001;
bfc01100:	ac430400 	sw	v1,1024(v0)
C:\Users\Matt\Projects\mipsfpga-display\src\c\basic_dot/main.c:68 (discriminator 1)



  while(1) { }
bfc01104:	1000ffff 	b	bfc01104 <main+0xc0>
bfc01108:	00000000 	nop
bfc0110c:	00000000 	nop
